{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","React","memo","name","value","label","required","onChange","validation","useState","Math","random","toString","slice","id","touched","setToched","hasError","htmlFor","classNames","type","placeholder","event","target","onBlur","NewMovie","onAdd","count","setCount","setTitle","setImgUrl","setImdbUrl","setImdbId","setDescription","isValidUrl","test","isValidString","useMemo","trim","length","isAddButtonLocked","useCallback","disabled","onClick","preventDefault","prevCount","App","moviesFromServer","allMovies","setAllMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.df624bbd.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  validation?: (value: string) => boolean,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = React.memo(\n  ({\n    name,\n    value,\n    label = name,\n    required = false,\n    onChange = () => {},\n    validation,\n  }) => {\n    // generage a unique id once on component load\n    const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n    // To show errors only if the field was touched (onBlur)\n    const [touched, setToched] = useState(false);\n    let hasError = touched && required && !value;\n\n    if (validation) {\n      hasError = touched && required && !validation(value);\n    }\n\n    return (\n      <div className=\"field\">\n        <label className=\"label\" htmlFor={id}>\n          {label}\n        </label>\n\n        <div className=\"control\">\n          <input\n            id={id}\n            data-cy={`movie-${name}`}\n            className={classNames('input', {\n              'is-danger': hasError,\n            })}\n            type=\"text\"\n            placeholder={`Enter ${label}`}\n            value={value}\n            onChange={event => onChange(event.target.value)}\n            onBlur={() => setToched(true)}\n          />\n        </div>\n\n        {hasError && (\n          <p className=\"help is-danger\">{`${label} is required`}</p>\n        )}\n      </div>\n    );\n  },\n);\n","import { useCallback, useMemo, useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void,\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n  const [description, setDescription] = useState('');\n\n  const isValidUrl = (value: string): boolean => {\n    const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/; // eslint-disable-line max-len\n\n    return pattern.test(value);\n  };\n\n  const isValidString = useMemo(() => {\n    return (value: string): boolean => {\n      return value.trim().length > 0;\n    };\n  }, []);\n\n  const isAddButtonLocked = useCallback(() => {\n    return isValidUrl(imgUrl) && isValidUrl(imdbUrl)\n    && isValidString(title) && isValidString(imdbId);\n  }, [imgUrl, imdbUrl, title, imdbId]);\n\n  const clearForm = () => {\n    setTitle('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n    setDescription('');\n  };\n\n  const handleAddButton = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    const movie = {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    };\n\n    onAdd(movie);\n    clearForm();\n    setCount(prevCount => prevCount + 1);\n  };\n\n  return (\n    <form className=\"NewMovie\" key={count}>\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={(value) => {\n          setTitle(value);\n        }}\n        required\n        validation={isValidString}\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={(value) => {\n          setDescription(value);\n        }}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={(value) => {\n          setImgUrl(value);\n        }}\n        required\n        validation={isValidUrl}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={(value) => {\n          setImdbUrl(value);\n        }}\n        required\n        validation={isValidUrl}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={(value) => {\n          setImdbId(value);\n        }}\n        required\n        validation={isValidString}\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!isAddButtonLocked()}\n            onClick={handleAddButton}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport { Movie } from './types/Movie';\nimport moviesFromServer from './api/movies.json';\n\nexport const App = () => {\n  const [allMovies, setAllMovies] = useState(moviesFromServer);\n  const onAdd = (movie: Movie) => {\n    setAllMovies([...allMovies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={allMovies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={onAdd} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}